BOXLIB_HOME ?= /path/to/BoxLib
CASTRO_HOME ?= /path/to/Castro

# radiation needs hypre
HYPRE_DIR ?= /path/to/Hypre
HYPRE_OMP_DIR ?= /path/to/Hypre--with-openmp

TOP := $(CASTRO_HOME)

EOS_HOME ?= $(TOP)/Microphysics/EOS
NETWORK_HOME ?= $(TOP)/Microphysics/networks
COND_HOME ?= $(TOP)/Microphysics/conductivity

EBASE = Castro

# EXTERN_CORE is simply a list of the directories we use in EOS, Networks and Util
# this list will be searched for runtime parameters
EXTERN_CORE ?=

include $(BOXLIB_HOME)/Tools/C_mk/Make.defs

# Castro uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

# The default is to include the sponge functionality
DEFINES += -DSPONGE

ifeq ($(USE_ACC), TRUE)
  DEFINES += -DACC
endif

ifeq ($(USE_GRAV), TRUE)
  DEFINES += -DGRAVITY
  ifndef USE_SELF_GRAV
    USE_SELF_GRAV = TRUE
  endif
  ifeq ($(USE_SELF_GRAV), TRUE)
    DEFINES += -DSELF_GRAVITY
  endif
endif

ifeq ($(USE_GR), TRUE)
  DEFINES += -DGR_GRAV
endif

ifeq ($(USE_REACT), TRUE)
  DEFINES += -DREACTIONS
endif

ifeq ($(USE_SDC), TRUE)
  USERSuffix   = .SDC
  DEFINES += -DSDC
endif

ifeq ($(USE_DIFFUSION), TRUE)
  DEFINES += -DDIFFUSION
endif

ifeq ($(USE_TAU), TRUE)
  DEFINES += -DTAU
endif

ifeq ($(USE_HYBRID_MOMENTUM), TRUE)
  ifeq ($(DIM), 3)
    DEFINES += -DHYBRID_MOMENTUM
  endif
endif

ifeq ($(USE_SHOCK_VAR), TRUE)
  DEFINES += -DSHOCK_VAR
endif

ifeq ($(USE_AUX_UPDATE), TRUE)
  DEFINES += -DAUX_UPDATE
endif

ifeq ($(USE_POINTMASS), TRUE)
  DEFINES += -DPOINTMASS
endif

ifeq ($(USE_POST_SIM), TRUE)
  DEFINES += -DDO_PROBLEM_POST_SIMULATION
endif

ifeq ($(USE_RAD), TRUE)
  DEFINES += -DRADIATION
  DEFINES += -DRAD_INTERP

  ifeq ($(USE_NEUTRINO), TRUE)
    DEFINES += -DNEUTRINO
    USERSuffix   = .Neutrino
    ifeq ($(USE_DUMPMODEL), TRUE)
      DEFINES += -DHAS_DUMPMODEL
    endif
  endif
endif

ifeq ($(USE_MAESTRO_INIT), TRUE)
  DEFINES +=  -DBL_NOLINEVALUES -DBL_PARALLEL_IO -DMAESTRO_INIT
  CEXE_headers += DataServices.H AmrData.H AmrvisConstants.H
  CEXE_sources += DataServices.cpp AmrData.cpp
  FEXE_sources += FABUTIL_$(DIM)D.F
  VPATH_LOCATIONS   += $(BOXLIB_HOME)/Src/Extern/amrdata
  INCLUDE_LOCATIONS += $(BOXLIB_HOME)/Src/Extern/amrdata
endif

ifeq ($(USE_ROTATION), TRUE)
  DEFINES += -DROTATION
endif

ifeq ($(USE_RAD), TRUE)
  USE_HYPRE := TRUE
endif

ifeq ($(USE_HYPRE), TRUE)
  ifeq ($(USE_OMP), TRUE)
    INCLUDE_LOCATIONS += $(HYPRE_OMP_DIR)/include
    LIBRARY_LOCATIONS += $(HYPRE_OMP_DIR)/lib
  else
    INCLUDE_LOCATIONS += $(HYPRE_DIR)/include
    LIBRARY_LOCATIONS += $(HYPRE_DIR)/lib
  endif
  LIBRARIES += -lHYPRE
endif

ifeq ($(USE_HDF5), TRUE)
   INCLUDE_LOCATIONS += $(HDF5_DIR)/include
   INCLUDE_LOCATIONS += $(HDF5_INCL)
   LIBRARY_LOCATIONS += $(HDF5_DIR)/lib
   LIBRARIES += -lhdf5 -lhdf5_fortran -lhdf5 -lz
endif

all: $(executable) 
	@echo SUCCESS

# for backward compatibility -- MICROPHYSICS_DIR is deprecated
ifndef MICROPHYSICS_HOME
  ifdef MICROPHYSICS_DIR
    MICROPHYSICS_HOME := $(MICROPHYSICS_DIR)
    $(info MICROPHYSICS_DIR is deprecated.  Please use MICROPHYSICS_HOME)
  endif 
endif

ifdef MICROPHYSICS_HOME
      EOS_PATH := $(MICROPHYSICS_HOME)/EOS/$(strip $(EOS_dir))
      NETWORK_PATH := $(MICROPHYSICS_HOME)/networks/$(strip $(Network_dir))
endif

ifneq "$(wildcard $(EOS_HOME)/$(strip $(EOS_dir)) )" ""
      EOS_PATH := $(EOS_HOME)/$(strip $(EOS_dir))
endif
ifneq "$(wildcard $(NETWORK_HOME)/$(strip $(Network_dir)) )" ""
      NETWORK_PATH := $(NETWORK_HOME)/$(strip $(Network_dir))
endif

ifeq ($(USE_DIFFUSION), TRUE)
  COND_PATH := $(COND_HOME)/$(strip $(Conductivity_dir))
endif

# Problems can specify the input file for general_null by 
# setting GENERAL_NET_INPUTS directly (full path) or just
# specifying the name of the inputs file as NETWORK_INPUTS
# and let us sort it out
ifndef GENERAL_NET_INPUTS
  ifneq "$(wildcard $(NETWORK_INPUTS))" ""
    GENERAL_NET_INPUTS := $(NETWORK_INPUTS)
  else
    GENERAL_NET_INPUTS := $(CASTRO_HOME)/Microphysics/networks/general_null/$(NETWORK_INPUTS)
  endif
endif

include $(EOS_HOME)/Make.package
include $(EOS_PATH)/Make.package
EXTERN_CORE += $(EOS_HOME)
EXTERN_CORE += $(EOS_PATH)

# the helmholtz EOS has an include file -- also add a target to link the table
# into the problem directory.
ifeq ($(findstring helmholtz, $(EOS_dir)), helmholtz)
  all: table
endif

table:
	@if [ ! -f helm_table.dat ]; then echo Linking helm_table.dat; ln -s $(EOS_PATH)/helm_table.dat .;  fi

include $(NETWORK_HOME)/Make.package
include $(NETWORK_PATH)/Make.package
EXTERN_CORE += $(NETWORK_HOME)
EXTERN_CORE += $(NETWORK_PATH)

# Note that this should be located after the include of the EOS and Network includes
# since it has actions that depend on variables set there.

ifdef MICROPHYSICS_HOME
  include $(MICROPHYSICS_HOME)/EOS/Make.package
  include $(MICROPHYSICS_HOME)/networks/Make.package
endif

ifeq ($(USE_DIFFUSION), TRUE)
  include $(COND_PATH)/Make.package
  EXTERN_CORE += $(COND_PATH)
endif	      

ifeq ($(USE_RAD), TRUE)
  OPAC_PATH := $(TOP)/Microphysics/opacity/$(Opacity_dir)
  include $(OPAC_PATH)/Make.package
  EXTERN_CORE += $(OPAC_PATH)
endif

INCLUDE_LOCATIONS += $(EOS_HOME)
INCLUDE_LOCATIONS += $(EOS_PATH)
VPATH_LOCATIONS   += $(EOS_HOME)
VPATH_LOCATIONS   += $(EOS_PATH)

INCLUDE_LOCATIONS += $(NETWORK_HOME)
INCLUDE_LOCATIONS += $(NETWORK_PATH)
VPATH_LOCATIONS   += $(NETWORK_HOME)
VPATH_LOCATIONS   += $(NETWORK_PATH)

ifeq ($(USE_DIFFUSION), TRUE)
  INCLUDE_LOCATIONS += $(COND_PATH)
  VPATH_LOCATIONS   += $(COND_PATH)
endif

ifeq ($(USE_RAD), TRUE)
  INCLUDE_LOCATIONS += $(OPAC_PATH)
  VPATH_LOCATIONS   += $(OPAC_PATH)
endif

ifeq ($(USE_RAD), TRUE)
LAPACK_dir    := $(TOP)/Util/LAPACK
include $(LAPACK_dir)/Make.package
EXTERN_CORE += $(TOP)/Util/LAPACK
INCLUDE_LOCATIONS += $(LAPACK_dir) 
VPATH_LOCATIONS   += $(LAPACK_dir) 
endif

ifeq ($(DIM), 1)
DEFINES += -DHAS_XGRAPH
include $(TOP)/Util/plot1d/Make.package
INCLUDE_LOCATIONS += $(TOP)/Util/plot1d
VPATH_LOCATIONS   += $(TOP)/Util/plot1d
endif


Bdirs 	:= Source Source/param_includes Source/Src_$(DIM)d Source/Src_nd


Pdirs 	:= C_BaseLib C_AmrCoreLib C_AMRLib C_BoundaryLib 

ifeq ($(USE_PARTICLES), TRUE)
  Pdirs += C_ParticleLib
endif

ifeq ($(USE_RAD), TRUE)
   Pdirs += LinearSolvers/C_CellMG
endif

Bpack	+= $(foreach dir, $(Pdirs), $(BOXLIB_HOME)/Src/$(dir)/Make.package)

Bpack	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir)/Make.package)
Blocs	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir))

ifeq ($(USE_RAD), TRUE)
RadDirs := Source/Radiation
RadDirs += Source/Radiation/_interpbndry
RadDirs	+= Source/Radiation/RadSrc_$(DIM)d Source/Radiation/RadSrc_nd

Bpack += $(foreach dir, $(RadDirs), $(TOP)/$(dir)/Make.package)
Blocs += $(foreach dir, $(RadDirs), $(TOP)/$(dir))
endif

include $(Bpack)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

include $(TOP)/constants/Make.package
EXTERN_CORE += $(TOP)/constants
INCLUDE_LOCATIONS += $(TOP)/constants
VPATH_LOCATIONS   += $(TOP)/constants

include $(TOP)/Util/model_parser/Make.package
EXTERN_CORE += $(TOP)/Util/model_parser
INCLUDE_LOCATIONS += $(TOP)/Util/model_parser
VPATH_LOCATIONS   += $(TOP)/Util/model_parser

USE_MG = FALSE

ifeq ($(USE_GRAV), TRUE)
  USE_MG = TRUE
endif

ifeq ($(USE_DIFFUSION), TRUE)
  USE_MG = TRUE
endif
   
ifeq ($(USE_MG), TRUE)
  include $(BOXLIB_HOME)/Src/LinearSolvers/C_to_F_MG/Make.package
  include $(BOXLIB_HOME)/Src/LinearSolvers/F_MG/FParallelMG.mak
endif

include $(BOXLIB_HOME)/Src/F_BaseLib/FParallelMG.mak

# runtime parameter support for extern/ routines
f90EXE_sources += extern.f90

EXTERN_TEMPLATE := $(TOP)/Source/extern_probin.template

EXTERN_PARAMETERS := $(shell $(BOXLIB_HOME)/Tools/F_scripts/findparams.py $(EXTERN_CORE))

extern.f90: $(EXTERN_PARAMETERS) $(EXTERN_TEMPLATE)
	$(BOXLIB_HOME)/Tools/F_scripts/write_probin.py \
           -t $(EXTERN_TEMPLATE) -o extern.f90 -n extern \
           --pa "$(EXTERN_PARAMETERS)" 

# job_info support
#CEXE_sources += buildInfo.cpp
CEXE_headers += $(BOXLIB_HOME)/Tools/C_scripts/buildInfo.H
INCLUDE_LOCATIONS +=  $(BOXLIB_HOME)/Tools/C_scripts


MNAMES := EOS=$(EOS_PATH) NETWORK=$(NETWORK_PATH)
ifeq ($(USE_DIFFUSION), TRUE)
  MNAMES += CONDUCTIVITY=$(COND_PATH)
endif

ifeq ($(USE_RAD), TRUE)
  MNAMES += OPACITY=$(OPAC_PATH)
endif

# we make buildInfo.cpp as we make the .o file, so we can delete it
# immediately.  this way if the build is interrupted, we are guaranteed
# to remake it

objForExecs += $(objEXETempDir)/buildInfo.o

.FORCE:
.PHONE: .FORCE

$(objEXETempDir)/buildInfo.o: .FORCE
ifdef BUILD_GIT_NAME
	$(BOXLIB_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --boxlib_home "$(BOXLIB_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --MODULES "$(MNAMES)" \
          --GIT "$(TOP) $(BOXLIB_HOME) $(MICROPHYSICS_HOME)" \
	  --build_git_name "$(BUILD_GIT_NAME)" \
	  --build_git_dir "$(BUILD_GIT_DIR)"
else
	$(BOXLIB_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --boxlib_home "$(BOXLIB_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --MODULES "$(MNAMES)" \
          --GIT "$(TOP) $(BOXLIB_HOME) $(MICROPHYSICS_HOME)"
endif
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(CXXEXEFLAGS) buildInfo.cpp -o $(objEXETempDir)/buildInfo.o
	$(SILENT) $(RM) buildInfo.cpp


include $(BOXLIB_HOME)/Tools/C_mk/Make.rules

clean::
	$(SILENT) $(RM) extern.f90
	$(SILENT) $(RM) buildInfo.cpp

# Older versions of CASTRO generated a
# "network.f90" file when using the
# general_null network, which conflicts
# with our generalized network.f90 file.
# So we should delete the local copy if
# we are trying to rebuild from an old directory.

clean::
	$(RM) network.f90
	@if [ -L helm_table.dat ]; then rm -f helm_table.dat; fi


#-----------------------------------------------------------------------------
# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will
# print out the value.
print-%::
	@echo "$* is $($*)"
	@$(RM) buildInfo.cpp
