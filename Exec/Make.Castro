BOXLIB_HOME ?= /path/to/BoxLib
CASTRO_DIR ?= /path/to/Castro

TOP := $(CASTRO_DIR)

EOS_HOME ?= $(TOP)/EOS
NETWORK_HOME ?= $(TOP)/Networks
COND_HOME ?= $(TOP)/Conductivity

EBASE = Castro

# EXTERN_CORE is simply a list of the directories we use in EOS, Networks and Util
# this list will be searched for runtime parameters
EXTERN_CORE :=

include $(BOXLIB_HOME)/Tools/C_mk/Make.defs

# Castro uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

ifeq ($(USE_GRAV), TRUE)
  DEFINES += -DGRAVITY
endif

ifeq ($(USE_GR), TRUE)
  DEFINES += -DGR_GRAV
endif

ifeq ($(USE_REACT), TRUE)
  DEFINES += -DREACTIONS
endif

ifeq ($(USE_SGS), TRUE)
  DEFINES += -DSGS
endif

ifeq ($(USE_DIFFUSION), TRUE)
  DEFINES += -DDIFFUSION
endif

ifeq ($(USE_TAU), TRUE)
  DEFINES += -DTAU
endif

ifeq ($(USE_PARTICLES), TRUE)
  DEFINES += -DPARTICLES
endif

ifeq ($(USE_LEVELSET), TRUE)
  DEFINES += -DLEVELSET
endif

ifeq ($(USE_AUX_UPDATE), TRUE)
  DEFINES += -DAUX_UPDATE
endif

ifeq ($(USE_POINTMASS), TRUE)
  DEFINES += -DPOINTMASS
endif

ifeq ($(USE_RAD), TRUE)
  DEFINES += -DRADIATION
  ifeq ($(RAD_INTERP), TRUE)
    DEFINES += -DRAD_INTERP
  endif
  ifeq ($(USE_NEUTRINO), TRUE)
    DEFINES += -DNEUTRINO
    optionsSuffix   = $(DIM)d.Neutrino.$(machineSuffix)
    ifeq ($(USE_DUMPMODEL), TRUE)
      DEFINES += -DHAS_DUMPMODEL
    endif
  endif
endif

ifeq ($(USE_MAESTRO_INIT), TRUE)
  DEFINES +=  -DBL_NOLINEVALUES -DBL_PARALLEL_IO -DMAESTRO_INIT
  CEXE_headers += DataServices.H AmrData.H AmrvisConstants.H
  CEXE_sources += DataServices.cpp AmrData.cpp
  FEXE_sources += FABUTIL_$(DIM)D.F
  VPATH_LOCATIONS   += $(BOXLIB_HOME)/Src/Extern/amrdata
  INCLUDE_LOCATIONS += $(BOXLIB_HOME)/Src/Extern/amrdata
endif

ifeq ($(USE_ROTATION), TRUE)
  DEFINES += -DROTATION
endif

ifeq ($(USE_HYPRE), TRUE)
  ifeq ($(USE_OMP), TRUE)
    INCLUDE_LOCATIONS += $(HYPRE_OMP_DIR)/include
    LIBRARY_LOCATIONS += $(HYPRE_OMP_DIR)/lib
  else
    INCLUDE_LOCATIONS += $(HYPRE_DIR)/include
    LIBRARY_LOCATIONS += $(HYPRE_DIR)/lib
  endif
  LIBRARIES += -lHYPRE
endif

ifeq ($(USE_HDF5), TRUE)
   INCLUDE_LOCATIONS += $(HDF5_DIR)/include
   INCLUDE_LOCATIONS += $(HDF5_INCL)
   LIBRARY_LOCATIONS += $(HDF5_DIR)/lib
   LIBRARIES += -lhdf5 -lhdf5_fortran -lhdf5 -lz
endif

all: $(executable) 
	$(SILENT) $(RM) buildInfo.cpp
	@echo SUCCESS


ifdef MICROPHYSICS_DIR
      EOS_PATH := $(MICROPHYSICS_DIR)/eos/$(strip $(EOS_dir))
      NETWORK_PATH := $(MICROPHYSICS_DIR)/networks/$(strip $(Network_dir))
      SCREEN_PATH := $(MICROPHYSICS_DIR)/screening
endif

ifneq "$(wildcard $(EOS_HOME)/$(strip $(EOS_dir)) )" ""
      EOS_PATH := $(EOS_HOME)/$(strip $(EOS_dir))
endif
ifneq "$(wildcard $(NETWORK_HOME)/$(strip $(Network_dir)) )" ""
      NETWORK_PATH := $(NETWORK_HOME)/$(strip $(Network_dir))
endif

ifeq ($(USE_DIFFUSION), TRUE)
  COND_PATH := $(COND_HOME)/$(strip $(Conductivity_dir))
endif

ifeq ($(USE_RAD), TRUE)
  ifneq "$(wildcard $(RADIATION_DIR)/EOS/$(strip $(EOS_dir)) )" ""
    EOS_PATH     := $(RADIATION_DIR)/EOS/$(strip $(EOS_dir))
  endif
  ifneq "$(wildcard $(RADIATION_DIR)/Networks/$(strip $(Network_dir)) )" ""
    NETWORK_PATH := $(RADIATION_DIR)/Networks/$(strip $(Network_dir))
  endif
  # Check if the test directory has Network_inputs
  ifneq "$(wildcard $(Network_inputs))" ""
    GENERAL_NET_INPUTS := $(Network_inputs)
  else 
    GENERAL_NET_INPUTS := $(NETWORK_PATH)/$(strip $(Network_inputs))
  endif
endif

include $(EOS_HOME)/Make.package
include $(EOS_PATH)/Make.package
EXTERN_CORE += $(EOS_HOME)
EXTERN_CORE += $(EOS_PATH)

# the helmholtz EOS has an include file -- also add a target to link the table
# into the problem directory.
ifeq ($(findstring helmholtz, $(EOS_dir)), helmholtz)
  all: table
endif

table:
	@if [ ! -f helm_table.dat ]; then echo Linking helm_table.dat; ln -s $(EOS_PATH)/helm_table.dat .;  fi

include $(NETWORK_HOME)/Make.package
include $(NETWORK_PATH)/Make.package
EXTERN_CORE += $(NETWORK_HOME)
EXTERN_CORE += $(NETWORK_PATH)

ifdef MICROPHYSICS_DIR
  include $(SCREEN_PATH)/Make.package
  EXTERN_CORE += $(SCREEN_PATH)
endif

ifeq ($(USE_DIFFUSION), TRUE)
  include $(COND_PATH)/Make.package
  EXTERN_CORE += $(COND_PATH)
endif	      

ifeq ($(USE_RAD), TRUE)
  include $(RADIATION_DIR)/Opacity/$(Opacity_dir)/Make.package
  EXTERN_CORE += $(RADIATION_DIR)/Opacity/$(Opacity_dir)  
endif

INCLUDE_LOCATIONS += $(EOS_HOME)
INCLUDE_LOCATIONS += $(EOS_PATH)
VPATH_LOCATIONS   += $(EOS_HOME)
VPATH_LOCATIONS   += $(EOS_PATH)

INCLUDE_LOCATIONS += $(NETWORK_HOME)
INCLUDE_LOCATIONS += $(NETWORK_PATH)
VPATH_LOCATIONS   += $(NETWORK_HOME)
VPATH_LOCATIONS   += $(NETWORK_PATH)

ifeq ($(USE_DIFFUSION), TRUE)
  INCLUDE_LOCATIONS += $(COND_PATH)
  VPATH_LOCATIONS   += $(COND_PATH)
endif

ifdef MICROPHYSICS_DIR
  INCLUDE_LOCATIONS += $(SCREEN_PATH)
  VPATH_LOCATIONS   += $(SCREEN_PATH)
endif

ifeq ($(USE_RAD), TRUE)
  INCLUDE_LOCATIONS += $(RADIATION_DIR)/Opacity/$(Opacity_dir)/
  VPATH_LOCATIONS   += $(RADIATION_DIR)/Opacity/$(Opacity_dir)/
endif

ifeq ($(USE_REACT), TRUE)
VODE_dir    := $(TOP)/Util/VODE
include $(VODE_dir)/Make.package
EXTERN_CORE += $(TOP)/Util/VODE
INCLUDE_LOCATIONS += $(VODE_dir) 
VPATH_LOCATIONS   += $(VODE_dir) 

BLAS_dir    := $(TOP)/Util/BLAS
include $(BLAS_dir)/Make.package
EXTERN_CORE += $(TOP)/Util/BLAS
INCLUDE_LOCATIONS += $(BLAS_dir) 
VPATH_LOCATIONS   += $(BLAS_dir) 
endif

ifeq ($(USE_RAD), TRUE)
LAPACK_dir    := $(TOP)/Util/LAPACK
include $(LAPACK_dir)/Make.package
EXTERN_CORE += $(TOP)/Util/LAPACK
INCLUDE_LOCATIONS += $(LAPACK_dir) 
VPATH_LOCATIONS   += $(LAPACK_dir) 
endif

ifeq ($(DIM), 1)
DEFINES += -DHAS_XGRAPH
include $(TOP)/Util/plot1d/Make.package
INCLUDE_LOCATIONS += $(TOP)/Util/plot1d
VPATH_LOCATIONS   += $(TOP)/Util/plot1d
endif


Bdirs 	:= Source Source/Src_$(DIM)d Source/Src_nd


Pdirs 	:= C_BaseLib C_AMRLib C_BoundaryLib 

ifeq ($(USE_RAD), TRUE)
   Pdirs += LinearSolvers/C_CellMG
endif

Bpack	+= $(foreach dir, $(Pdirs), $(BOXLIB_HOME)/Src/$(dir)/Make.package)
Blocs	+= $(foreach dir, $(Pdirs), $(BOXLIB_HOME)/Src/$(dir))

Bpack	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir)/Make.package)
Blocs	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir))

ifeq ($(USE_TRACING), TRUE)
   Blocs := $(ASTRODEV_DIR)/Castro_source/tracing $(Blocs)
endif

ifeq ($(USE_RAD), TRUE)
include $(RADIATION_DIR)/Exec/Make.Radiation
endif

include $(Bpack)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

include $(TOP)/constants/Make.package
EXTERN_CORE += $(TOP)/constants
INCLUDE_LOCATIONS += $(TOP)/constants
VPATH_LOCATIONS   += $(TOP)/constants

ifeq ($(USE_MODELPARSER), TRUE)
  include $(TOP)/Util/model_parser/Make.package
  EXTERN_CORE += $(TOP)/Util/model_parser
  INCLUDE_LOCATIONS += $(TOP)/Util/model_parser
  VPATH_LOCATIONS   += $(TOP)/Util/model_parser
endif

USE_MG = FALSE

ifeq ($(USE_GRAV), TRUE)
  USE_MG = TRUE
endif

ifeq ($(USE_DIFFUSION), TRUE)
  USE_MG = TRUE
endif
   
ifeq ($(USE_MG), TRUE)
  include $(BOXLIB_HOME)/Src/LinearSolvers/C_to_F_MG/Make.package
  INCLUDE_LOCATIONS += $(BOXLIB_HOME)/Src/LinearSolvers/C_to_F_MG
  VPATH_LOCATIONS   += $(BOXLIB_HOME)/Src/LinearSolvers/C_to_F_MG

  include $(BOXLIB_HOME)/Src/LinearSolvers/F_MG/FParallelMG.mak
  INCLUDE_LOCATIONS += $(BOXLIB_HOME)/Src/LinearSolvers/F_MG
  VPATH_LOCATIONS   += $(BOXLIB_HOME)/Src/LinearSolvers/F_MG
endif

include $(BOXLIB_HOME)/Src/F_BaseLib/FParallelMG.mak
INCLUDE_LOCATIONS += $(BOXLIB_HOME)/Src/F_BaseLib
VPATH_LOCATIONS   += $(BOXLIB_HOME)/Src/F_BaseLib

# runtime parameter support for extern/ routines
f90EXE_sources += extern.f90

EXTERN_TEMPLATE := $(TOP)/Source/extern_probin.template

EXTERN_PARAMETERS := $(shell $(BOXLIB_HOME)/Tools/F_scripts/findparams.py $(EXTERN_CORE))

extern.f90: $(EXTERN_PARAMETERS) $(EXTERN_TEMPLATE)
	$(BOXLIB_HOME)/Tools/F_scripts/write_probin.py \
           -t $(EXTERN_TEMPLATE) -o extern.f90 -n extern \
           --pa "$(EXTERN_PARAMETERS)" 

# job_info support
CEXE_sources += buildInfo.cpp
CEXE_headers += $(BOXLIB_HOME)/Tools/C_scripts/buildInfo.H
INCLUDE_LOCATIONS +=  $(BOXLIB_HOME)/Tools/C_scripts


buildInfo.cpp:
ifdef BUILD_GIT_NAME
	$(BOXLIB_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --boxlib_home "$(BOXLIB_HOME)" \
          --COMP "$(COMP)" \
          --FCOMP "$(FCOMP)" \
          --AUX "$(EOS_PATH) $(NETWORK_PATH)" \
          --GIT "$(TOP) $(BOXLIB_HOME) $(ASTRODEV_DIR)" \
	  --build_git_name "$(BUILD_GIT_NAME)" \
	  --build_git_dir "$(BUILD_GIT_DIR)"
else
	$(BOXLIB_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --boxlib_home "$(BOXLIB_HOME)" \
          --COMP "$(COMP)" \
          --FCOMP "$(FCOMP)" \
          --AUX "$(EOS_PATH) $(NETWORK_PATH)" \
          --GIT "$(TOP) $(BOXLIB_HOME) $(ASTRODEV_DIR)"
endif

vpath %.c   . $(VPATH_LOCATIONS)
vpath %.cpp . $(VPATH_LOCATIONS)
vpath %.h   . $(VPATH_LOCATIONS)
vpath %.H   . $(VPATH_LOCATIONS)
vpath %.F   . $(VPATH_LOCATIONS)
vpath %.f90 . $(VPATH_LOCATIONS)
vpath %.F90 . $(VPATH_LOCATIONS)
vpath %.f   . $(VPATH_LOCATIONS)
vpath %.fi  . $(VPATH_LOCATIONS)


include $(BOXLIB_HOME)/Tools/C_mk/Make.rules

clean::
	$(SILENT) $(RM) extern.f90
	$(SILENT) $(RM) buildInfo.cpp

# Older versions of CASTRO generated a
# "network.f90" file when using the
# general_null network, which conflicts
# with our generalized network.f90 file.
# So we should delete the local copy if
# we are trying to rebuild from an old directory.

clean::
	$(RM) network.f90
	@if [ -L helm_table.dat ]; then rm -f helm_table.dat; fi


#-----------------------------------------------------------------------------
# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will
# print out the value.
print-%: ; @echo $* is $($*)

